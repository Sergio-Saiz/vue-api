{"remainingRequest":"/home/sergio/code/login-vuejs/node_modules/babel-loader/lib/index.js!/home/sergio/code/login-vuejs/src/store/index.js","dependencies":[{"path":"/home/sergio/code/login-vuejs/src/store/index.js","mtime":1662761112795},{"path":"/home/sergio/code/login-vuejs/node_modules/cache-loader/dist/cjs.js","mtime":1662705389539},{"path":"/home/sergio/code/login-vuejs/node_modules/babel-loader/lib/index.js","mtime":1662705389914}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/sergio/code/login-vuejs/src/store/index.js"],"names":["Vue","Vuex","router","use","Store","state","token","user","username","id","mutations","setToken","payload","setUser","logout","localStorage","removeItem","location","reload","actions","login","commit","fetch","method","headers","body","JSON","stringify","res","json","userDB","setItem","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","window","atob","map","c","charCodeAt","toString","slice","join","tokenPayload","parse","console","log","register","dashboard","auth_token","name","getToken","getItem","requestResetPassword","email","resendActivationEmail","activateAccount","modules"],"mappings":";;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEAF,GAAG,CAACG,GAAJ,CAAQF,IAAR;AAEA,eAAe,IAAIA,IAAI,CAACG,KAAT,CAAe;AAC5BC,EAAAA,KAAK,EAAE;AACLC,IAAAA,KAAK,EAAE,IADF;AAELC,IAAAA,IAAI,EAAE;AACJC,MAAAA,QAAQ,EAAE,IADN;AAEJC,MAAAA,EAAE,EAAE;AAFA;AAFD,GADqB;AAQ5BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,QADS,oBACAN,KADA,EACOO,OADP,EACgB;AACvBP,MAAAA,KAAK,CAACC,KAAN,GAAcM,OAAd;AACD,KAHQ;AAITC,IAAAA,OAJS,mBAIDR,KAJC,EAIMO,OAJN,EAIe;AACtBP,MAAAA,KAAK,CAACE,IAAN,GAAaK,OAAb;AACD,KANQ;AAOTE,IAAAA,MAPS,oBAOA;AACPC,MAAAA,YAAY,CAACC,UAAb,CAAwB,OAAxB;AACAC,MAAAA,QAAQ,CAACC,MAAT;AACD;AAVQ,GARiB;AAoB5BC,EAAAA,OAAO,EAAE;AACDC,IAAAA,KADC,uBACiBb,IADjB,EACuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAhBc,gBAAAA,MAAgB,QAAhBA,MAAgB;AAAA;AAAA;AAAA,uBAERC,KAAK,CAAC,+CAAD,EAAkD;AACvEC,kBAAAA,MAAM,EAAE,MAD+D;AAEvEC,kBAAAA,OAAO,EAAE;AACP,oCAAgB;AADT,mBAF8D;AAKvEC,kBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAepB,IAAf;AALiE,iBAAlD,CAFG;;AAAA;AAEpBqB,gBAAAA,GAFoB;AAAA;AAAA,uBASLA,GAAG,CAACC,IAAJ,EATK;;AAAA;AASpBC,gBAAAA,MAToB;AAU1BT,gBAAAA,MAAM,CAAC,UAAD,EAAaS,MAAM,CAACxB,KAApB,CAAN;AACAS,gBAAAA,YAAY,CAACgB,OAAb,CAAqB,OAArB,EAA8BD,MAAM,CAACxB,KAArC;AAEI0B,gBAAAA,SAbsB,GAaVF,MAAM,CAACxB,KAAP,CAAa2B,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CAbU;AActBC,gBAAAA,MAdsB,GAcbF,SAAS,CAACG,OAAV,CAAkB,IAAlB,EAAwB,GAAxB,EAA6BA,OAA7B,CAAqC,IAArC,EAA2C,GAA3C,CAda;AAetBC,gBAAAA,WAfsB,GAeRC,kBAAkB,CAACC,MAAM,CAACC,IAAP,CAAYL,MAAZ,EAAoBD,KAApB,CAA0B,EAA1B,EAA8BO,GAA9B,CAAkC,UAASC,CAAT,EAAY;AAC/E,yBAAO,MAAM,CAAC,OAAOA,CAAC,CAACC,UAAF,CAAa,CAAb,EAAgBC,QAAhB,CAAyB,EAAzB,CAAR,EAAsCC,KAAtC,CAA4C,CAAC,CAA7C,CAAb;AACH,iBAFoC,EAElCC,IAFkC,CAE7B,EAF6B,CAAD,CAfV;AAmBpBC,gBAAAA,YAnBoB,GAmBLpB,IAAI,CAACqB,KAAL,CAAWX,WAAX,CAnBK;AAoB1Bf,gBAAAA,MAAM,CAAC,SAAD,EAAY;AAACZ,kBAAAA,EAAE,EAAEqC,YAAY,CAACrC,EAAlB;AAAsBD,kBAAAA,QAAQ,EAAEsC,YAAY,CAACtC;AAA7C,iBAAZ,CAAN;AACAO,gBAAAA,YAAY,CAACgB,OAAb,CAAqB,SAArB,EAAgC;AAACtB,kBAAAA,EAAE,EAAEqC,YAAY,CAACrC,EAAlB;AAAsBD,kBAAAA,QAAQ,EAAEsC,YAAY,CAACtC;AAA7C,iBAAhC;AArB0B;AAAA;;AAAA;AAAA;AAAA;AAwB1BwC,gBAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;;AAxB0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2B7B,KA5BM;AA6BDC,IAAAA,QA7BC,2BA6BqB3C,IA7BrB,EA6B4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAlBc,gBAAAA,MAAkB,SAAlBA,MAAkB;AAAA;AAAA;AAAA,uBAEbC,KAAK,CAAC,4CAAD,EAA+C;AACpEC,kBAAAA,MAAM,EAAE,MAD4D;AAEpEC,kBAAAA,OAAO,EAAE;AACP,oCAAgB;AADT,mBAF2D;AAKpEC,kBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAepB,IAAf;AAL8D,iBAA/C,CAFQ;;AAAA;AAEzBqB,gBAAAA,GAFyB;AAAA;AAAA,uBASVA,GAAG,CAACC,IAAJ,EATU;;AAAA;AASzBC,gBAAAA,MATyB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAW/BkB,gBAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;;AAX+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAalC,KA1CM;AA2CDE,IAAAA,SA3CC,4BA2CmBC,UA3CnB,EA2C8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAApB/B,gBAAAA,MAAoB,SAApBA,MAAoB;AAAA;AAAA;AAAA,uBAEfC,KAAK,CAAC,+CAAD,EAAmD;AACxEC,kBAAAA,MAAM,EAAE,KADgE;AAExEC,kBAAAA,OAAO,EAAE;AACP,oCAAgB,kBADT;AAEP,kCAAc4B;AAFP;AAF+D,iBAAnD,CAFU;;AAAA;AAE3BxB,gBAAAA,GAF2B;AAAA;AAAA,uBASZA,GAAG,CAACC,IAAJ,EATY;;AAAA;AAS3BC,gBAAAA,MAT2B;AAUjCT,gBAAAA,MAAM,CAAC,SAAD,EAAY;AAACgC,kBAAAA,IAAI,EAAEvB,MAAM,CAACvB,IAAP,CAAY8C;AAAnB,iBAAZ,CAAN;AAViC;AAAA;;AAAA;AAAA;AAAA;AAYjCL,gBAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;;AAZiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcpC,KAzDM;AA0DPK,IAAAA,QA1DO,2BA0DY;AAAA,UAATjC,MAAS,SAATA,MAAS;;AACjB,UAAGN,YAAY,CAACwC,OAAb,CAAqB,OAArB,CAAH,EAAkC;AAChClC,QAAAA,MAAM,CAAC,UAAD,EAAaN,YAAY,CAACwC,OAAb,CAAqB,OAArB,CAAb,CAAN;AACD,OAFD,MAEO;AACLlC,QAAAA,MAAM,CAAC,UAAD,EAAa,IAAb,CAAN;AACD;AACF,KAhEM;AAiEPP,IAAAA,MAjEO,yBAiEa;AAAA,UAAVO,MAAU,SAAVA,MAAU;AAClBA,MAAAA,MAAM,CAAC,QAAD,CAAN;AACD,KAnEM;AAqEDmC,IAAAA,oBArEC,uCAqE8BC,KArE9B,EAqEsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAjBpC,gBAAAA,MAAiB,SAAjBA,MAAiB;AAAA;AAAA;AAAA,uBAEvBC,KAAK,CAAC,0DAAD,EAA6D;AAClFC,kBAAAA,MAAM,EAAE,MAD0E;AAElFC,kBAAAA,OAAO,EAAE;AACP,oCAAgB;AADT,mBAFyE;AAKlFC,kBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe8B,KAAf;AAL4E,iBAA7D,CAFkB;;AAAA;AAEnC7B,gBAAAA,GAFmC;AAAA;AAAA,uBASpBA,GAAG,CAACC,IAAJ,EAToB;;AAAA;AASnCC,gBAAAA,MATmC;AAUzCkB,gBAAAA,OAAO,CAACC,GAAR,CAAYnB,MAAZ;AAVyC;AAAA;;AAAA;AAAA;AAAA;AAYzCkB,gBAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;;AAZyC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAc5C,KAnFM;AAqFDS,IAAAA,qBArFC,wCAqF+BD,KArF/B,EAqFuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAjBpC,gBAAAA,MAAiB,SAAjBA,MAAiB;AAAA;AAAA;AAAA,uBAExBC,KAAK,CAAC,2DAAD,EAA8D;AACnFC,kBAAAA,MAAM,EAAE,MAD2E;AAEnFC,kBAAAA,OAAO,EAAE;AACP,oCAAgB;AADT,mBAF0E;AAKnFC,kBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe8B,KAAf;AAL6E,iBAA9D,CAFmB;;AAAA;AAEpC7B,gBAAAA,GAFoC;AAAA;AAAA,uBASrBA,GAAG,CAACC,IAAJ,EATqB;;AAAA;AASpCC,gBAAAA,MAToC;AAU1CkB,gBAAAA,OAAO,CAACC,GAAR,CAAYnB,MAAZ;AAV0C;AAAA;;AAAA;AAAA;AAAA;AAY1CkB,gBAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;;AAZ0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAc7C,KAnGM;AAqGDU,IAAAA,eArGC,kCAqG2BpD,IArG3B,EAqGkC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAjBc,gBAAAA,MAAiB,SAAjBA,MAAiB;AAAA;AAAA;AAAA,uBA4BnBC,KAAK,CAAC,uCAAuCf,IAAI,CAACE,EAA5C,GAAiD,WAAlD,EAA+D;AACpFc,kBAAAA,MAAM,EAAE,KAD4E;AAEpFC,kBAAAA,OAAO,EAAE;AACP,oCAAgB,kBADT;AAEP,qCAAiB,YAAY,KAAI,CAACnB,KAAL,CAAWC;AAFjC,mBAF2E;AAMpFmB,kBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACrB,oBAAAA,KAAK,EAAEC,IAAI,CAACD;AAAb,mBAAf;AAN8E,iBAA/D,CA5Bc;;AAAA;AA4B/BsB,gBAAAA,GA5B+B;AAAA;AAAA,uBAoChBA,GAAG,CAACC,IAAJ,EApCgB;;AAAA;AAoC/BC,gBAAAA,MApC+B;AAqCrCkB,gBAAAA,OAAO,CAACC,GAAR,CAAYnB,MAAZ;AArCqC;AAAA;;AAAA;AAAA;AAAA;AAuCrCkB,gBAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;;AAvCqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2CxC;AAhJM,GApBmB;AAwK5BW,EAAAA,OAAO,EAAE;AAxKmB,CAAf,CAAf","sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\nimport router from '../router'\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: {\n    token: null,\n    user: {\n      username: null,\n      id: null\n    }\n  },\n  mutations: {\n    setToken(state, payload) {\n      state.token = payload\n    },\n    setUser(state, payload) {\n      state.user = payload\n    },\n    logout() {\n      localStorage.removeItem('token')\n      location.reload()\n    },\n  },\n  actions: {\n    async login({ commit }, user) {\n      try {\n        const res = await fetch('http://localhost:250/api/v1/users/login_check', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(user)\n        })\n        const userDB = await res.json()\n        commit('setToken', userDB.token)\n        localStorage.setItem('token', userDB.token)\n\n        var base64Url = userDB.token.split('.')[1];\n        var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n        var jsonPayload = decodeURIComponent(window.atob(base64).split('').map(function(c) {\n            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n        }).join(''));\n    \n        const tokenPayload = JSON.parse(jsonPayload)\n        commit('setUser', {id: tokenPayload.id, username: tokenPayload.username})\n        localStorage.setItem('setUser', {id: tokenPayload.id, username: tokenPayload.username})\n         \n      } catch (error) {\n        console.log('Error: ', error)\n      }\n      \n    },\n    async register({ commit },  user ) {\n      try {\n        const res = await fetch('http://localhost:250/api/v1/users/register', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },  \n          body: JSON.stringify(user)\n        })\n        const userDB = await res.json()\n      } catch (error) {\n        console.log('Error: ', error)\n      }\n    },\n    async dashboard({commit}, auth_token){\n      try {\n        const res = await fetch('http://localhost:250/api/v1/users/login_check',  {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n            'auth-token': auth_token\n          },\n        })\n        const userDB = await res.json()\n        commit('setUser', {name: userDB.user.name})\n      } catch (error) {\n        console.log('Error: ', error)\n      }\n    },\n    getToken({commit}) {\n      if(localStorage.getItem('token')) {\n        commit('setToken', localStorage.getItem('token'))\n      } else {\n        commit('setToken', null)\n      }\n    },\n    logout ({ commit }) {\n      commit('logout')\n    },\n\n    async requestResetPassword({commit}, email ) {\n      try {\n        const res = await fetch('http://localhost:250/api/v1/users/request_reset_password', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },  \n          body: JSON.stringify(email)\n        })\n        const userDB = await res.json()\n        console.log(userDB)\n      } catch (error) {\n        console.log('Error: ', error)\n      }\n    },\n\n    async resendActivationEmail({commit}, email ) {\n      try {\n        const res = await fetch('http://localhost:250/api/v1/users/resend_activation_email', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },  \n          body: JSON.stringify(email)\n        })\n        const userDB = await res.json()\n        console.log(userDB)\n      } catch (error) {\n        console.log('Error: ', error)\n      }\n    },\n\n    async activateAccount({ commit }, user ) {\n      // try {\n      //   const res = await fetch('http://localhost:250/api/v1/users/login_check', {\n      //     method: 'POST',\n      //     headers: {\n      //       'Content-Type': 'application/json',\n      //     },\n      //     body: JSON.stringify(user)\n      //   })\n      //   const userDB = await res.json()\n      //   commit('setToken', userDB.token)\n      //   localStorage.setItem('token', userDB.token)\n\n      //   var base64Url = userDB.token.split('.')[1];\n      //   var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n      //   var jsonPayload = decodeURIComponent(window.atob(base64).split('').map(function(c) {\n      //       return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n      //   }).join(''));\n    \n      //   const tokenPayload = JSON.parse(jsonPayload)\n      //   commit('setUser', {id: tokenPayload.id, username: tokenPayload.username})\n      //   localStorage.setItem('setUser', {id: tokenPayload.id, username: tokenPayload.username})\n         \n      // } catch (error) {\n      //   console.log('Error: ', error)\n      // }\n\n      try {\n        const res = await fetch('http://localhost:250/api/v1/users/' + user.id + '/activate', {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + this.state.token \n          },  \n          body: JSON.stringify({token: user.token})\n        })\n        const userDB = await res.json()\n        console.log(userDB)\n      } catch (error) {\n        console.log('Error: ', error)\n      }\n\n      \n    },\n    \n  \n  },\n  modules: {\n  }\n})\n"]}]}